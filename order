#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
# Set Getopt::Long to allow bundling, e.g. -vq is the same as -v -q
Getopt::Long::Configure ("bundling");
use File::Copy;

package Local::Order;

__PACKAGE__->main() unless caller;

# Global variables
our $initialValue;
our $pad;
our $prefix;
our $simulate;
our $target;
our $verbose;

sub main()
{
	parseOptions();
	usage() unless scalar(@ARGV);
	$prefix = $ARGV[0] . "-" unless defined $prefix;
	$pad = 3 unless defined $pad;
	$initialValue = 1 unless defined $initialValue;
	if (defined $target)
	{
		$target =~ s:/*$:/:;
	}
	else
	{
		$target = '';
	}
	order(@ARGV);
}

sub parseOptions()
{
	Getopt::Long::GetOptions ('help|h'			=> sub { usage() },
							  'initial|i=i'		=> \$initialValue,
							  'number|n=i'		=> \$pad,
							  'prefix|p=s'		=> \$prefix,
						  	  'simulate|s'		=> \$simulate,
						  	  'target-dir|t=s'	=> \$target,
							  'verbose|v'		=> \$verbose );
}

sub order()
{
	die unless @_;
	my $index = $initialValue;

	for my $oldFile (@_)
	{
		my $newFile = sprintf("${prefix}%0${pad}s_${oldFile}", $index);
		print "$oldFile\t=>\t$target$newFile\n" if $verbose or $simulate;
		File::Copy::move("$oldFile", "$target$newFile") unless $simulate;
		$index++;
	}
}

sub usage()
{
	print <<EOF;
Usage: order [options] file [...]
Options:
\t-h,--help\t\tPrint this message and exit
\t-i,--initial number\tSet the initial value from which to order the arguments
\t-n,--padding number\tSets the amount of zero-padding to use
\t-p,--prefix prefix\tSets the value to prepend to each file
\t-s,--simulate\t\tOutput what actions would be performed without actually doing anything
\t-t,--target-dir dir\tSet the directory to which to move the files
\t-v,--verbose\t\tShow what is being done
EOF

	exit 0;
}
